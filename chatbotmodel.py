# -*- coding: utf-8 -*-
"""chatbotmodel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qR3wQ9SnHHntfDUAWop-wypupsYETTix
"""

import json
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, GlobalAveragePooling1D
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.preprocessing import LabelEncoder
#load json file 
with open('intents.json') as file:
    data = json.load(file)
# training messages will have the all the sample queries
training_messages = []
# training tags to save the all the labels
training_tags = []
labels = []
#chatbot responses
responses = []

for intent in data['intents']:
    for pattern in intent['patterns']:
        training_messages.append(pattern)
        training_tags.append(intent['tag'])
    responses.append(intent['responses'])
    
    if intent['tag'] not in labels:
        labels.append(intent['tag'])
        
number_of_classes = len(labels)

#label encoder to convert the tags to numerical form
lbl_encoder = LabelEncoder()
#training_tags = lbl_encoder.fit_transform(training_tags)
lbl_encoder.fit(training_tags)
training_tags = lbl_encoder.transform(training_tags)
vocab_size = 1000
embedding_dim = 32
max_len = 100
oov_token = "<OOV>"

tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token) # adding out of vocabulary token
tokenizer.fit_on_texts(training_messages)
word_index = tokenizer.word_index
sequences = tokenizer.texts_to_sequences(training_messages)
# to make all the sequences in a uniform length
padded_sequences = pad_sequences(sequences, truncating='post', maxlen=max_len)

model = Sequential()
model.add(Embedding(vocab_size, embedding_dim, input_length=max_len))
model.add(GlobalAveragePooling1D())
model.add(Dense(32, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(number_of_classes, activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()
epochs = 550
history = model.fit(padded_sequences, np.array(training_tags), epochs=epochs)
# saving model
model.save("chat_model")

import pickle

# saving tokenizer
with open('tokenizer.pickle', 'wb') as handle:
    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)
    

# saving label encoder
with open('label_encoder.pickle', 'wb') as ecn_file:
    pickle.dump(lbl_encoder, ecn_file, protocol=pickle.HIGHEST_PROTOCOL)

